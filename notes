Mutations are responsible for single state changes
  - ie. update products array in our store
  - setProducts (state, products) {
      state.products = products
  }

Getters function the same way as computed properties
  - good for filtering or calculating during runtime
  - ie. calculate shopping cart total
  - availableProducts (state, getters) {
      return state.products.filter(product => product.inventory > 0)
  }

Actions function the same way as methods
  - when we need to fetch the products from an api, we create an action for it
  - fetchProducts (context) {
      shop.getProducts(products => {
          context.commit('setProducts', products)
      })
  }
  - Actions decide when a mutation should fire, while mutations are always the ones responsible for state changes